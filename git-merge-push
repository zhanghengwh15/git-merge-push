#!/bin/bash

# 获取脚本所在目录
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 打印带颜色的消息
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查是否启用发版
ENABLE_RELEASE=false
if [[ "$1" == "--release" || "$1" == "-r" ]]; then
    ENABLE_RELEASE=true
    print_info "发版模式已启用"
fi

# 从 pom.xml 获取 artifactId
get_artifactId() {
    local pom_file="pom.xml"
    
    if [ ! -f "$pom_file" ]; then
        print_error "pom.xml 文件不存在"
        return 1
    fi
    
    # 使用 grep 和 sed 提取 artifactId
    local artifact_id=$(grep -o '<artifactId>[^<]*</artifactId>' "$pom_file" | head -1 | sed 's/<artifactId>\(.*\)<\/artifactId>/\1/')
    
    if [ -z "$artifact_id" ]; then
        print_error "无法从 pom.xml 中获取 artifactId"
        return 1
    fi
    
    echo "$artifact_id"
}

# 执行 git 操作
execute_git_operations() {
    print_info "开始执行 git 操作..."
   
    
    print_info "Git 操作完成"
}

# 触发 Jenkins 发版
trigger_jenkins_release() {
    local job_name="$1"
    
    if [ -z "$job_name" ]; then
        print_error "Job 名称不能为空"
        return 1
    fi
    
    print_info "准备触发 Jenkins Job: $job_name"
    
    # 检查 jenkins_release.sh 是否存在
    local jenkins_script="$SCRIPT_DIR/jenkins_release.sh"
    if [ ! -f "$jenkins_script" ]; then
        print_error "jenkins_release.sh 脚本不存在: $jenkins_script"
        return 1
    fi
    
    # 触发 Jenkins Job
    if "$jenkins_script" "$job_name"; then
        print_success "Jenkins Job '$job_name' 触发成功！"
    else
        print_error "Jenkins Job '$job_name' 触发失败！"
        return 1
    fi
}

# 主函数
main() {
    print_info "开始执行 git-merge-push 流程..."
    
    # 执行 git 操作
    if ! execute_git_operations; then
        print_error "Git 操作失败"
        exit 1
    fi
    
    # 如果启用发版，则触发 Jenkins
    if [ "$ENABLE_RELEASE" = true ]; then
        print_info "Git 操作完成，准备触发发版..."
        
        # 获取 artifactId
        local artifact_id
        if ! artifact_id=$(get_artifactId); then
            print_error "获取 artifactId 失败"
            exit 1
        fi
        
        print_info "从 pom.xml 获取到 artifactId: $artifact_id"
        
        # 触发 Jenkins 发版
        if ! trigger_jenkins_release "$artifact_id"; then
            print_error "发版触发失败"
            exit 1
        fi
    else
        print_info "未启用发版模式，流程结束"
    fi
    
    print_success "所有操作完成！"
}

# 显示帮助信息
show_help() {
    echo "用法: $0 [选项]"
    echo ""
    echo "选项:"
    echo "  -r, --release    在所有 git 操作完成后触发 Jenkins 发版"
    echo "  -h, --help       显示此帮助信息"
    echo ""
    echo "示例:"
    echo "  $0               仅执行 git 操作"
    echo "  $0 --release     执行 git 操作并触发发版"
    echo "  $0 -r            执行 git 操作并触发发版"
}

# 处理命令行参数
case "$1" in
    -h|--help)
        show_help
        exit 0
        ;;
    -r|--release)
        # 继续执行主流程
        ;;
    "")
        # 无参数，继续执行主流程
        ;;
    *)
        print_error "未知参数: $1"
        show_help
        exit 1
        ;;
esac

# 执行主函数
main "$@" 